@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;

	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}

@mixin placeholder {
    ::-webkit-input-placeholder {
        @content;
    }

    :-moz-placeholder {
        @content;
    }

    ::-moz-placeholder {
        @content;
    }

    :-ms-input-placeholder {
        @content;
    }
}

// ==============================
// Font size mixin
// ==============================

//  default font scale bounding
$font-lock-min:  400px !default; 
$font-lock-max: 1000px !default;

//  font-size 
@mixin font-size(
    $min,                         // font-size 
    $max: null,                   // optional maximum font size
    $lock-min: $font-lock-min,  // optional minimum viewport width 
    $lock-max: $font-lock-max   // optional maximum viewport width 
) {
    & { font-size: $min; }
    @if $max {
        @media (min-width: $lock-min) and (max-width: $lock-max) {
            & { 
                font-size: calc(
                    #{$min} + 
                    #{num($max) - num($min)} * 
                    (100vw - #{$lock-min}) / 
                    #{num($lock-max) - num($lock-min)}
                ); 
            } 
        }
            
        @media (min-width: $lock-max){ 
            & { font-size: $max; } 
        }
    }
}

//  strip units helper function
@function num($input){ 
    @return $input/($input * 0 + 1);
}